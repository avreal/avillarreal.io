
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Tags on Alan Villarreal</title>
   <link>avillarreal.io/tags/</link>
   <description>Recent content in Tags on Alan Villarreal</description>
   <generator>Hugo -- gohugo.io</generator>
   <copyright>Copyright &amp;copy; 2020 - Alan Villarreal</copyright>
   
       <atom:link href="avillarreal.io/tags/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>VLAN Hopping Over Trunks: Why Native VLAN Mismatches Matter </title>
       <link>avillarreal.io/posts/nativevlan/</link>
       <pubDate>Sun, 05 Apr 2020 11:06:53 -0700</pubDate>
       
       <guid>avillarreal.io/posts/nativevlan/</guid>
       <description>&lt;p&gt;When learning about VLANs and layer 2 segmentation, we are always told that the purpose of VLANs is to separate broadcast domains, and traffic from one VLAN can not go to the other VLAN unless specifically allowed. However there are situations in which traffic from one VLAN can leak across to another VLAN which is a massive security risk. In this post I will show an example of VLAN hopping in the case of a native VLAN mismatch, and discuss the native VLAN in general. Note that this is geared more towards Cisco IOS, as other vendors may not implement the native VLAN in their switches.&lt;/p&gt;
&lt;p&gt;Before getting into it, lets first look into our lab setup. Click &lt;a href=&#34;avillarreal.io/1resources/images/nativevlan/nativevlanlab.PNG&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt; for full size.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;avillarreal.io/1resources/images/nativevlan/nativevlan.PNG&#34; alt=&#34;nativevlanlab&#34;&gt;&lt;/p&gt;
&lt;p&gt;I am using the vios_l2-adventerprisek9-m.03.2017.qcow2 image here, as IOU images have some unexpected behavior when it comes to VLAN tagging. I have created a portable project that can be downloaded &lt;a href=&#34;avillarreal.io/1resources/misc/nativevlan/nativevlan.gns3project&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt; (you must have your own IOSv image).&lt;/p&gt;
&lt;p&gt;We simply have 3 L3 Switches, each with VLANs 2-3 configured and a PC connected, then a DHCP server. The switches have dot1q trunks configured between them, all with default settings. The PCs are numbered according to the access VLAN they are plugged into.&lt;/p&gt;
&lt;p&gt;Before discussing VLAN Hopping, I&amp;rsquo;ll quickly go over the function of the Native VLAN.&lt;/p&gt;
&lt;p&gt;Conventional knowledge tells us that currently, only the PC on VLAN1 will successfully pull an IP address from the DHCP server (which is also on VLAN1). We can verify this as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PC1&amp;gt; ip dhcp
DDORA IP 192.168.1.2/24 GW 192.168.1.1
PC1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;PC2&amp;gt; ip dhcp
DDD
Can&#39;t find dhcp server
PC2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;PC3&amp;gt; ip dhcp
DDD
Can&#39;t find dhcp server
PC3&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point PC1 is able to reach the DHCP server on layer 2 and obtain an IP address but not the other PCs. Now I will set PC2 and PC3 statically on the same layer 3 network. Note that we are not able to ping them as there is still no layer 2 visibility between PC1 and PC2/PC3.&lt;/p&gt;
&lt;p&gt;PC2 - 192.168.1.20/24&lt;/p&gt;
&lt;p&gt;PC3 - 192.168.1.30/24&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PC1&amp;gt; ping 192.168.1.20 (PC2)
PC1&amp;gt; ping 192.168.1.20) not reachable

PC1&amp;gt; ping 192.168.1.30 (PC3)
host (192.168.1.30) not reachable
PC1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Lets take a deeper dive into whats happening on the trunk links when the PCs attempt to send traffic to each other on different VLANs.&lt;/p&gt;
&lt;p&gt;When trying to ping from PC1 to PC2/PC3, first an ARP broadcast is sent out. Lets look at the traffic on the trunk from Gi0/0 on S1.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;avillarreal.io/1resources/images/nativevlan/pcap1.PNG&#34; alt=&#34;pcap1&#34;&gt;&lt;/p&gt;
&lt;p&gt;Looks like a normal ARP request, however there is no response and the pings eventually fail. Now lets ping from PC2 to PC1 and look at the ARP request on the trunk from Gi0/0 on the S2 side.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;avillarreal.io/1resources/images/nativevlan/pcap2.PNG&#34; alt=&#34;pcap1&#34;&gt;&lt;/p&gt;
&lt;p&gt;It appears we have a new field, an 802.1Q VLAN tag! As before, there is no reply to the ARP request and the pings fail. Let&amp;rsquo;s break down what is happening on the switches.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;S2 receives broadcast frame from PC2 on Gi1/1 which is an access port on VLAN2.&lt;/li&gt;
&lt;li&gt;S2 then floods it out of all ports on VLAN2 as well as the trunks allowing VLAN2.&lt;/li&gt;
&lt;li&gt;On the trunks, S2 adds a VLAN tag to the frame because it originated from a non-native VLAN. This explains why the frames from S1 did not have this tag.&lt;/li&gt;
&lt;li&gt;Now over to S1 and S3 who have both received this frame. Since the frame has a VLAN tag with an ID of 2, these switches will remove the tag and know to only flood it access ports on VLAN2 or trunks allowing VLAN2.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Or visually,&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;avillarreal.io/1resources/images/nativevlan/nativevlan4.PNG&#34; alt=&#34;ex1&#34;&gt;&lt;/p&gt;
&lt;p&gt;If we did a pcap on the link between PC1 and S1 we would not see the ARP broadcast when PC2 tries to ping it. Now I have added a dummy PC on vlan2 of S1 (lets call it PCx). When we try to ping from PC2 to PC1, we can see the ARP request that was broadcast by PC2.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;avillarreal.io/1resources/images/nativevlan/pcap3.PNG&#34; alt=&#34;pcap3&#34;&gt;&lt;/p&gt;
&lt;p&gt;As we can see, there is no VLAN tag as it has been removed by S1 before flooding it to VLAN2.&lt;/p&gt;
&lt;p&gt;So what is the purpose of the native VLAN? Essentially, the native VLAN just tells the trunk which frames it will tag. If the traffic originates from the native VLAN, it will be sent out of the trunk untagged. If it comes from a non-native VLAN, the frame is tagged and sent out. When the frame is received on the other end of the trunk, the switch will check for a VLAN tag. If there is no vlan tag it assumes that the traffic is meant to go to the native vlan and will forward it to the ports there, otherwise it will forward it to the access VLAN corresponding to the tag (and other trunks if its a broadcast). Here is a simple table showing this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Access VLAN&lt;/th&gt;
&lt;th&gt;Native VLAN Y&lt;/th&gt;
&lt;th&gt;Native VLAN X&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;X&lt;/td&gt;
&lt;td&gt;Tagged With X on Egress&lt;/td&gt;
&lt;td&gt;Untagged&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt;
&lt;td&gt;Untagged&lt;/td&gt;
&lt;td&gt;Tagged with Y on Egress&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;native-vlan-configuration-and-vlan-hopping&#34;&gt;Native VLAN Configuration and VLAN Hopping&lt;/h2&gt;
&lt;p&gt;Now lets look at the native VLAN configuration and ask the question, why should we mess with the native VLAN in the first place? Generally it is considered a security best practice to configure the native VLAN throughout the network as some unused VLAN. This ensures that devices plugged into unconfigured ports wont be able to see interact with other devices and protocols running on VLAN1, as well as mitigating various attacks. However, if care is not taken when changing the native VLAN, unintended consequences can occur. Lets go to S2 and change the native vlan to 2.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Switch(config-if)#switchport trunk native vlan 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;NOTE THAT I AM DOING THIS CONFIGURATION IN INTERFACE CONFIG MODE, THE NATIVE VLAN IS CONFIGURED ON A PER TRUNK BASIS, NOT PER SWITCH BASIS.&lt;/p&gt;
&lt;p&gt;A couple of things happen once this configuration is done.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;00:030002. Inconsistent local vlan.
00:29.335: %SPANTREE-2-RECV_PVID_ERR: Received BPDU with inconsistent peer vlan id 1 on GigabitEthernet0/0 VLAN2.
00:03:29.368: %SPANTCK_PVID_PEER: Blocking GigabitEthernet0/0 on VLAN0001. Inconsistent peer vlan.
00:03:29.382: %SPANTREE-2-BLOCK_PVID_LOCAL: Blocking GigabitEthernet0/0 on VLAN

00:03:47.979: %CDP-4-NATIVE_VLAN_MISMATCH: Native VLAN mismatch discovered on GigabitEthernet0/0 (2), with Switch GigabitEthernet0/0 (1).
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Spanning tree has noticed that there is a native VLAN mismatch on the trunk and put the port into a PVID inconsistent state. If we check the output of &amp;lsquo;show spanning-tree&amp;rsquo; we see the following on both VLAN 1 and 2:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Interface           Role Sts Cost      Prio.Nbr Type
------------------- ---- --- --------- -------- --------------
Gi0/0               Desg BKN*4         128.1    P2p *PVID_Inc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We also see a message from CDP notifying us about the mismatch, but CDP does not take any corrective action.&lt;/p&gt;
&lt;p&gt;So after all this talk about the dangers of native VLAN mismatch, spanning tree has jumped in and fixed the problem! However, STP is not always running, suppose the network admin turned it off for whatever reason. Lets see what happens when we turn STP off on ALL of the trunks in our network. For this we will use &amp;lsquo;spanning-tree bpdufilter enable&amp;rsquo; at the interface level.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*Apr 26 00:13:19.983: %SPANTREE-2-UNBLOCK_CONSIST_PORT: Unblocking GigabitEthernet0/0 on VLAN0001. Port consistency restored.
*Apr 26 00:13:19.986: %SPANTREE-2-UNBLOCK_CONSIST_PORT: Unblocking GigabitEthernet0/0 on VLAN0002. Port consistency restored.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As we can see VLAN1 and VLAN2 have been unblocked on the trunk, and we have willingly kept our native VLAN mismatch. Now lets ping from PC1 to PC2.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PC1&amp;gt; ping 192.168.1.20
84 bytes from 192.168.1.20 icmp_seq=1 ttl=64 time=17.194 ms
84 bytes from 192.168.1.20 icmp_seq=2 ttl=64 time=11.901 ms
PC1&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Remember, PC1 is on access VLAN1 on S1, and PC2 is on access VLAN2 on PC2. We now have access to a device on a different broadcast domain! Lets take a closer look at the traffic.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We enter a ping command on PC1 to the IP address of PC2, I cleared the CAM and ARP tables so an ARP broadcast is sent first.&lt;/li&gt;
&lt;li&gt;The frame from PC1 to S1 is untagged as expected.&lt;/li&gt;
&lt;li&gt;Since PC1 is on VLAN1, and VLAN1 is the native VLAN on the Gi0/0 trunk, the frame is untagged coming out of Gi0/0 of S1.&lt;/li&gt;
&lt;li&gt;S2 receives this untagged frame on its Gi0/0 interface, since the Native VLAN here is VLAN2, the frame is flooded out of VLAN2.&lt;/li&gt;
&lt;li&gt;Since the frame was flooded out of VLAN2, PC2 is able to see it and respond.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Or visually,&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;avillarreal.io/1resources/images/nativevlan/nativevlan3.PNG&#34; alt=&#34;ex2&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is evident in the packet capture, where both the request (from S1 to S2) and the reply (from S2 to S1) travel across the trunk untagged, even though the devices generating these frames are on different access VLANS.&lt;/p&gt;
&lt;p&gt;ARP Request&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;avillarreal.io/1resources/images/nativevlan/pcap4.PNG&#34; alt=&#34;pcap4&#34;&gt;&lt;/p&gt;
&lt;p&gt;ARP Response&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;avillarreal.io/1resources/images/nativevlan/pcap5.PNG&#34; alt=&#34;pcap5&#34;&gt;&lt;/p&gt;
&lt;p&gt;So we can now go from VLAN1 to VLAN2 and back, but apply the same logic above to traffic from VLAN1 on S1 to VLAN1 on S2. Such traffic will no longer work! Now think of the ramifications of this. There are a number of combinations of native vlan configurations that allow for hopping over VLANs. Suppose the network was configured as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;S1 Gi0/0 - native vlan 1&lt;/li&gt;
&lt;li&gt;S2 Gi0/0 and 0/1 - native vlan 2&lt;/li&gt;
&lt;li&gt;S3 Gi0/0 and 0/1- native vlan3&lt;/li&gt;
&lt;li&gt;DHCP Server - plugged into vlan 3&lt;/li&gt;
&lt;li&gt;PC1 - Vlan1&lt;/li&gt;
&lt;li&gt;PC2 - Vlan2&lt;/li&gt;
&lt;li&gt;PC3 - Vlan3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Can you think of how traffic will be able to flow throughout the network?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;avillarreal.io/1resources/images/nativevlan/nativevlan2.PNG&#34; alt=&#34;ex3&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All 3 PCs will be able to reach the DHCP server and pull an IP&lt;/li&gt;
&lt;li&gt;All 3 PCs have full access to each other&lt;/li&gt;
&lt;li&gt;None of the frames from the PCs will be tagged on the trunks.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This could be disastrous in a production network, where an attacker will check for every possible opening and exploit it. So in the event of such a configuration, what is in place to mitigate this? As we have seen before spanning tree will take care of this but this kills all traffic on the mismatched VLANs, and what if the network admin doesn&amp;rsquo;t want to use spanning-tree for some reason? In this case we can also use the &amp;lsquo;vlan dot1q tag native&amp;rsquo; command. (Of course we can just NOT have native vlan mismatches but mistakes happen :) )&lt;/p&gt;
&lt;h2 id=&#34;vlan-dot1q-tag-native&#34;&gt;vlan dot1q tag native&lt;/h2&gt;
&lt;p&gt;So we know that traffic originating from a VLAN other than the native VLAN will be sent through a trunk with an 802.1q tag holding a VLAN ID. Traffic belonging to the native VLAN will be sent out untagged. However by using the following command in global config mode&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(config)#vlan dot1q tag native
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;All traffic sent out from the trunks on the switch will be tagged, even the native vlan. Another effect of this is that ALL UNTAGGED TRAFFIC RECEIVED ON A TRUNK ON THAT SWITCH WILL BE DROPPED (besides control traffic such as CDP etc). Note that this command is configured in global config mode, whereas the native VLAN is configured per trunk interface. Can you think of what effects this will have if we configure this on S1, following the same setup as the previous section?&lt;/p&gt;
&lt;p&gt;The first effect is that traffic from access ports on VLAN1 will have their frames tagged on the trunk leaving Gi0/0 of S1! We can see this here:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;avillarreal.io/1resources/images/nativevlan/pcap5.PNG&#34; alt=&#34;pcap5&#34;&gt;&lt;/p&gt;
&lt;p&gt;When this is done, devices on VLAN1 across all 3 switches can see each other, but you can no longer VLAN hop! Lets go through step by step from PC2 to PC1.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PC2 sends an ARP request broadcast which is received on access VLAN2&lt;/li&gt;
&lt;li&gt;Since the native VLAN is 2, the frame is sent out of Gi0/0 on S2 untagged&lt;/li&gt;
&lt;li&gt;Since we configured &amp;lsquo;vlan dot1q tag native&amp;rsquo; on S1, the frame is dropped on the trunk as it comes in!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now lets follow from PC1 to PC2&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PC1 sends an ARP request broadcast which is received on access VLAN1&lt;/li&gt;
&lt;li&gt;The native VLAN is 1, so the frame would normally be sent untagged, however since &amp;lsquo;vlan dot1q tag native&amp;rsquo; is configured the frame is sent with a tag specifying a vlan ID of 1.&lt;/li&gt;
&lt;li&gt;The frame is received on Gi0/0 of S2, where the native vlan is 2. Since it has a tag of 1, the tag is stripped and the frame is flooded out of VLAN1.&lt;/li&gt;
&lt;li&gt;There aren&amp;rsquo;t any devices on VLAN1 to receive the frame so nothing happens.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now we can update our table for the case of the native VLAN being tagged:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Access VLAN&lt;/th&gt;
&lt;th&gt;Native VLAN Y and Native Tagged&lt;/th&gt;
&lt;th&gt;Native VLAN X and Native Tagged&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;X&lt;/td&gt;
&lt;td&gt;Tagged With X on Egress&lt;/td&gt;
&lt;td&gt;Tagged with X on Egress&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt;
&lt;td&gt;Tagged With Y on Egress&lt;/td&gt;
&lt;td&gt;Tagged with Y on Egress&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;in-conclusion&#34;&gt;In Conclusion&lt;/h2&gt;
&lt;p&gt;As we have seen, even a slight mismanagement of the layer 2 network can have disastrous results and security ramifications. This is just one form of VLAN hopping, which is simply one type of attack in the vast landscape of network exploits.  I highly encourage everyone to lab these scenarios, as well as test out various combinations of these configurations in your own lab. Examining packet captures is an excellent way to gain a greater understanding of whats happening at every step of a traffic flow and how your configurations affect them!&lt;/p&gt;
&lt;p&gt;If you have any questions about the content of this post, don&amp;rsquo;t hesitate to &lt;a href=&#34;mailto:villarreal.alan.aav@gmail.com&#34;&gt;&lt;strong&gt;email&lt;/strong&gt;&lt;/a&gt; me or leave a comment in the disqus section below!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>OSPF Stub Area Types Part 2: Not So Stubby Areas</title>
       <link>avillarreal.io/posts/ospfareatypes2/</link>
       <pubDate>Tue, 31 Mar 2020 11:06:53 -0700</pubDate>
       
       <guid>avillarreal.io/posts/ospfareatypes2/</guid>
       <description>&lt;p&gt;The previous post left off with questions about redistribution into OSPF areas which are also classified as stub areas. Recall that stub areas filter type 4 and 5 LSAs, while totally stubby areas filter type 3,4, and 5. So what happens if we we wish to redistribute into a stubby area but keep other external routes out, or redistribute and have access to the entire network but with a minimally sized routing table and LSDB? In this post I will spin up the &lt;a href=&#34;avillarreal.io/1resources/images/ospfstub1/topology.PNG&#34;&gt;&lt;strong&gt;lab&lt;/strong&gt;&lt;/a&gt; (gns3 project download &lt;a href=&#34;avillarreal.io/1resources/misc/ospfstub1/OSPFStubArea.gns3project&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;) from the previous post and demonstrate what are called Not So Stubby Areas, as well as various subconfigurations of NSSAs.&lt;/p&gt;
&lt;h3 id=&#34;redistribution-into-stub-areas&#34;&gt;Redistribution into Stub Areas&lt;/h3&gt;
&lt;p&gt;As we saw in the previous post, configuring an area as a stub was a matter of a single config line in OSPF config mode. Now lets go to area 3 in our topology and suppose we also want that to be a stub, as we don&amp;rsquo;t want external routes from area 4 and 5 in our routing table. Here is the initial link state database (showing only external LSAs)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;EIGRP3#sh ip ospf database

                Summary ASB Link States (Area 3)

Link ID         ADV Router      Age         Seq#       Checksum
6.6.6.5         192.168.103.1   29          0x80000001 0x0053EB
44.44.44.5      192.168.103.1   29          0x80000001 0x00BEF9
55.55.55.5      192.168.103.1   29          0x80000001 0x003166

                Type-5 AS External Link States

Link ID         ADV Router      Age         Seq#       Checksum Tag
6.6.6.1         6.6.6.5         1944        0x80000001 0x005620 0
6.6.6.2         6.6.6.5         1944        0x80000001 0x004C29 0
6.6.6.3         6.6.6.5         1944        0x80000001 0x004232 0
6.6.6.4         6.6.6.5         1944        0x80000001 0x00383B 0
6.6.6.5         6.6.6.5         1944        0x80000001 0x002E44 0
33.33.33.1      33.33.33.5      18          0x80000001 0x00FBD7 0
33.33.33.2      33.33.33.5      18          0x80000001 0x00F1E0 0
33.33.33.3      33.33.33.5      18          0x80000001 0x00E7E9 0
33.33.33.4      33.33.33.5      18          0x80000001 0x00DDF2 0
33.33.33.5      33.33.33.5      18          0x80000001 0x00D3FB 0
44.44.44.1      44.44.44.5      1882        0x80000001 0x00652C 0
44.44.44.2      44.44.44.5      1882        0x80000001 0x005B35 0
44.44.44.3      44.44.44.5      1882        0x80000001 0x00513E 0
44.44.44.4      44.44.44.5      1882        0x80000001 0x004747 0
44.44.44.5      44.44.44.5      1882        0x80000001 0x003D50 0
55.55.55.1      55.55.55.5      1882        0x80000001 0x00CE80 0
55.55.55.2      55.55.55.5      1882        0x80000001 0x00C489 0
55.55.55.3      55.55.55.5      1882        0x80000001 0x00BA92 0
55.55.55.4      55.55.55.5      1882        0x80000001 0x00B09B 0
55.55.55.5      55.55.55.5      1882        0x80000001 0x00A6A4 0
EIGRP3#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now lets configure the routers in area 3 as a stub, using the &amp;lsquo;area 3 stub&amp;rsquo; command on all of the routers. We will start on the ASBR&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;EIGRP3(config-router)#area 3 stub
EIGRP3(config-router)#
*Apr 16 22:11:45.831: %OSPF-4-ASBR_WITHOUT_VALID_AREA: Router is currently an 
ASBR while having only one area which is a stub area
EIGRP3(config-router)#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We immediately see that the ASBR throws a message about our configuration. Why is this the case? Lets configure the other routers as a stub so the adjacencies form again and then take a look.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AREA3ABR(config-router)#area 3 stub
AREA3ABR(config-router)#end
AREA3ABR#
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;AREA3(config-router)#area 3 stub
*Apr 16 22:19:14.152: %OSPF-5-ADJCHG: Process 1, Nbr 192.168.103.1 on 
Ethernet0/0 from FULL to DOWN, Neighbor Down: Adjacency forced to reset

*Apr 16 22:19:14.968: %OSPF-5-ADJCHG: Process 1, Nbr 192.168.103.1 on 
Ethernet0/0 from LOADING to FULL, Loading Done
AREA3(config-router)#end
AREA3#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The other 2 routers didn&amp;rsquo;t seem to mind the configuration. Lets go back to the EIGRP3 router which has redistribution taking place, and is also an OSPF internal router in area3. Since we have configured it as a stub we know that the type 4 and 5 LSAs telling us about external destinations will not be flooded, but what about the external routes coming from the same router? Lets look at the link state database.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;EIGRP3#show ip ospf database external

            OSPF Router with ID (33.33.33.5) (Process ID 1)
EIGRP3#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The other 2 routers have the same output. So what has happened?&lt;/p&gt;
&lt;p&gt;By configuring area 3 as a stub we stopped type 4 and 5 LSAs as predicted, but even those LSAs from redistribution directly into our area were stopped. As a result, the routers can still reach all external destinations (because the ABR injects a default route), except the ones being redistributed from the EIGRP3 router! (the EIGRP3 router can still reach them because they are connected routes there) When we configured the ASBR as a stub earlier, that syslog message was warning us that we have configured our ASBR as a stub where no other OSPF areas exist, so there are likely going to be adverse effects as a result of this configuration!&lt;/p&gt;
&lt;p&gt;So how can we configure the internal routers in area 3 to have access to the external destinations that are being redistributed into their area, but also cut down on the size of the routing table/lsdb for other external destinations? The answer is &amp;hellip;.&lt;/p&gt;
&lt;h3 id=&#34;the-not-so-stubby-area&#34;&gt;The Not So Stubby Area&lt;/h3&gt;
&lt;p&gt;Once this topological limitation became apparent, the IETF introduced a standard for a new OSPF area type in &lt;a href=&#34;https://tools.ietf.org/html/rfc1587&#34;&gt;&lt;strong&gt;RFC 1587&lt;/strong&gt;&lt;/a&gt;. With the Not So Stubby Area (referred to as NSSA from now on) came type 7 LSAs, which are very similar to type 5 LSAs but are only propagated within the NSSA. This allows the routers within the NSSA to populate their databases with LSAs for the redistributed routes but also limit the propagation of type 4 and 5 LSAs. Let&amp;rsquo;s go back to the router called AREA3. The full LSDB can be accessed &lt;a href=&#34;avillarreal.io/1resources/textfiles/ospfstub2/area3lsdb.txt&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;, but you can refer to the output pasted above to see the initial state.&lt;/p&gt;
&lt;p&gt;Configuration is quite simple, as we did with the classic stub area we just do&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;area 3 nssa
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;on all of the routers in the area. As with classic stub areas, neighboring routers must have the same stub configuration for the adjacency to form. This is facilitated by the OSPF hello packet option field which has an N bit that is flipped when the area is set as a nssa. When this bit is set, the E bit is unset.&lt;/p&gt;
&lt;p&gt;Before setting nssa:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;avillarreal.io/1resources/images/ospfstub2/nssa0.PNG&#34; alt=&#34;nssa0&#34;&gt;&lt;/p&gt;
&lt;p&gt;After setting nssa:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;avillarreal.io/1resources/images/ospfstub2/nssa1.PNG&#34; alt=&#34;nssa1&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now lets check out the LSDB of our internal area 3 router now that area 3 is a nssa.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AREA3#sh ip ospf database external

            OSPF Router with ID (3.3.3.5) (Process ID 1)
AREA3#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As expected the type 4 and 5 LSAs are not present but wait..shouldn&amp;rsquo;t we at least have LSAs for the redistributed routes from the EIGRP3 router? YES, but recall from above that a new LSA type was introduced specifically for NSSAs. We can see this when we run the unfiltered sh ip ospf database (or sh ip ospf database nssa-external) command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AREA3#sh ip ospf database

            OSPF Router with ID (3.3.3.5) (Process ID 1)

***truncated***

  Type-7 AS External Link States (Area 3)

Link ID         ADV Router      Age         Seq#       Checksum Tag
33.33.33.1      33.33.33.5      1145        0x80000001 0x003B05 0
33.33.33.2      33.33.33.5      1145        0x80000001 0x00310E 0
33.33.33.3      33.33.33.5      1145        0x80000001 0x002717 0
33.33.33.4      33.33.33.5      1145        0x80000001 0x001D20 0
33.33.33.5      33.33.33.5      1145        0x80000001 0x001329 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now lets look at the routing table:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AREA3#sh ip route | include O E2
AREA3#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We have no OSPF E2 routes, because type 5 LSAs are blocked. But where are the redistributed routes? (full sh ip route output &lt;a href=&#34;avillarreal.io/1resources/textfiles/ospfstub2/area3nssalsdb.txt&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AREA3#sh ip route

***truncated***

O N2     33.33.33.1 [110/20] via 192.168.30.2, 00:25:35, Ethernet0/1
O N2     33.33.33.2 [110/20] via 192.168.30.2, 00:25:35, Ethernet0/1
O N2     33.33.33.3 [110/20] via 192.168.30.2, 00:25:35, Ethernet0/1
O N2     33.33.33.4 [110/20] via 192.168.30.2, 00:25:35, Ethernet0/1
O N2     33.33.33.5 [110/20] via 192.168.30.2, 00:25:35, Ethernet0/1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see we have a new route type! OSPF N2 routes are used to specifically denote routes generated from type 7 LSAs. These type 7 LSAs are then translated into type 5 LSAs at the ABR, which are flooded through the rest of the OSPF domain. It is very important to understand that type 7 LSAs &lt;em&gt;only exist within a NSSA&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Note no type 7 LSAs present on the hub router which is connected to an NSSA, they exist as type 5 here.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HUB#sh ip ospf database nssa-external

            OSPF Router with ID (192.168.10.1) (Process ID 1)
HUB#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So we have access to the networks from the EIGRP domain now, but if you look at the routing table there is no default route as with a stub area. That is because in NSSA the default route to the ABR is optional. With the base NSSA configuration we are allowing the redistributed networks in as type 7 LSAs but not allowing type 4 or 5 LSAs, as well as not generating a default route to the other external destinations. This is because there could be paths to external destinations both through the ABR, as well as beyond the ASBR.&lt;/p&gt;
&lt;p&gt;In terms of our lab, configuring area 3 as NSSA means we can reach the EIGRP3 domain, but none of the other EIGRP domains. The next sections show how this can be rectified.&lt;/p&gt;
&lt;h3 id=&#34;injecting-default-routes-into-nssa&#34;&gt;Injecting Default Routes Into NSSA&lt;/h3&gt;
&lt;p&gt;As we saw in the previous section, configuring an area as a NSSA allows for reachability to routes redistributed directly into the domain, but external destinations in other areas become unreachable due to the blocking of type 5 LSAs and no default route. In this section we will see a few ways to rectify that.&lt;/p&gt;
&lt;p&gt;First we will go over to area 4 in our topology and look at the LSDB and routing table. Click &lt;a href=&#34;avillarreal.io/1resources/textfiles/ospfstub2/area4lsdb.txt&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt; for the full LSDB and &lt;a href=&#34;avillarreal.io/1resources/textfiles/ospfstub2/area4route.txt&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt; for the full routing table. We are interested in the type 3,4, and 5 LSAs.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
                Summary Net Link States (Area 4)

Link ID         ADV Router      Age         Seq#       Checksum
1.1.1.1         192.168.104.1   691         0x80000002 0x00A3A2
1.1.1.2         192.168.104.1   691         0x80000002 0x0099AB
1.1.1.3         192.168.104.1   691         0x80000002 0x008FB4
1.1.1.4         192.168.104.1   691         0x80000002 0x0085BD
1.1.1.5         192.168.104.1   691         0x80000002 0x007BC6
2.2.2.1         192.168.104.1   428         0x80000002 0x007FC3
2.2.2.2         192.168.104.1   428         0x80000002 0x0075CC
2.2.2.3         192.168.104.1   428         0x80000002 0x006BD5
2.2.2.4         192.168.104.1   428         0x80000002 0x0061DE
2.2.2.5         192.168.104.1   428         0x80000002 0x0057E7
3.3.3.1         192.168.104.1   941         0x80000004 0x0057E6
3.3.3.2         192.168.104.1   941         0x80000004 0x004DEF
3.3.3.3         192.168.104.1   941         0x80000004 0x0043F8
3.3.3.4         192.168.104.1   941         0x80000004 0x003902
3.3.3.5         192.168.104.1   941         0x80000004 0x002F0B
5.5.5.1         192.168.104.1   941         0x80000002 0x001327
5.5.5.2         192.168.104.1   941         0x80000002 0x000930
5.5.5.3         192.168.104.1   941         0x80000002 0x00FE39
5.5.5.4         192.168.104.1   941         0x80000002 0x00F442
5.5.5.5         192.168.104.1   941         0x80000002 0x00EA4B

***physical interface lsa omitted, there are alot of them!***

                Summary ASB Link States (Area 4)

Link ID         ADV Router      Age         Seq#       Checksum
6.6.6.5         192.168.104.1   941         0x80000002 0x004AF2
55.55.55.5      192.168.104.1   941         0x80000002 0x00286D
192.168.103.1   192.168.104.1   1369        0x80000001 0x002A59

                Type-5 AS External Link States

Link ID         ADV Router      Age         Seq#       Checksum Tag
6.6.6.1         6.6.6.5         915         0x80000002 0x005421 0
6.6.6.2         6.6.6.5         915         0x80000002 0x004A2A 0
6.6.6.3         6.6.6.5         915         0x80000002 0x004033 0
6.6.6.4         6.6.6.5         915         0x80000002 0x00363C 0
6.6.6.5         6.6.6.5         915         0x80000002 0x002C45 0
33.33.33.1      192.168.103.1   1345        0x80000001 0x0023BD 0
33.33.33.2      192.168.103.1   1345        0x80000001 0x0019C6 0
33.33.33.3      192.168.103.1   1345        0x80000001 0x000FCF 0
33.33.33.4      192.168.103.1   1345        0x80000001 0x0005D8 0
33.33.33.5      192.168.103.1   1345        0x80000001 0x00FAE1 0
44.44.44.1      44.44.44.5      925         0x80000002 0x00632D 0
44.44.44.2      44.44.44.5      925         0x80000002 0x005936 0
44.44.44.3      44.44.44.5      925         0x80000002 0x004F3F 0
44.44.44.4      44.44.44.5      925         0x80000002 0x004548 0
44.44.44.5      44.44.44.5      925         0x80000002 0x003B51 0
55.55.55.1      55.55.55.5      814         0x80000002 0x00CC81 0
55.55.55.2      55.55.55.5      814         0x80000002 0x00C28A 0
55.55.55.3      55.55.55.5      814         0x80000002 0x00B893 0
55.55.55.4      55.55.55.5      814         0x80000002 0x00AE9C 0
55.55.55.5      55.55.55.5      814         0x80000002 0x00A4A5 0
AREA4#
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;AREA4#show ip route | include O E2
O E2     6.6.6.1 [110/20] via 192.168.104.1, 00:52:14, Ethernet0/0
O E2     6.6.6.2 [110/20] via 192.168.104.1, 00:52:14, Ethernet0/0
O E2     6.6.6.3 [110/20] via 192.168.104.1, 00:52:14, Ethernet0/0
O E2     6.6.6.4 [110/20] via 192.168.104.1, 00:52:14, Ethernet0/0
O E2     6.6.6.5 [110/20] via 192.168.104.1, 00:52:14, Ethernet0/0
O E2     33.33.33.1 [110/20] via 192.168.104.1, 00:26:44, Ethernet0/0
O E2     33.33.33.2 [110/20] via 192.168.104.1, 00:26:44, Ethernet0/0
O E2     33.33.33.3 [110/20] via 192.168.104.1, 00:26:44, Ethernet0/0
O E2     33.33.33.4 [110/20] via 192.168.104.1, 00:26:44, Ethernet0/0
O E2     33.33.33.5 [110/20] via 192.168.104.1, 00:26:44, Ethernet0/0
O E2     44.44.44.1 [110/20] via 192.168.40.2, 00:52:09, Ethernet0/1
O E2     44.44.44.2 [110/20] via 192.168.40.2, 00:52:09, Ethernet0/1
O E2     44.44.44.3 [110/20] via 192.168.40.2, 00:52:09, Ethernet0/1
O E2     44.44.44.4 [110/20] via 192.168.40.2, 00:52:09, Ethernet0/1
O E2     44.44.44.5 [110/20] via 192.168.40.2, 00:52:09, Ethernet0/1
O E2     55.55.55.1 [110/20] via 192.168.104.1, 00:50:55, Ethernet0/0
O E2     55.55.55.2 [110/20] via 192.168.104.1, 00:50:55, Ethernet0/0
O E2     55.55.55.3 [110/20] via 192.168.104.1, 00:50:55, Ethernet0/0
O E2     55.55.55.4 [110/20] via 192.168.104.1, 00:50:55, Ethernet0/0
O E2     55.55.55.5 [110/20] via 192.168.104.1, 00:50:55, Ethernet0/0
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;AREA4#show ip route | include O IA
O IA     1.1.1.1 [110/41] via 192.168.104.1, 00:46:23, Ethernet0/0
O IA     1.1.1.2 [110/41] via 192.168.104.1, 00:46:23, Ethernet0/0
O IA     1.1.1.3 [110/41] via 192.168.104.1, 00:46:23, Ethernet0/0
O IA     1.1.1.4 [110/41] via 192.168.104.1, 00:46:23, Ethernet0/0
O IA     1.1.1.5 [110/41] via 192.168.104.1, 00:46:23, Ethernet0/0
O IA     2.2.2.1 [110/41] via 192.168.104.1, 00:42:50, Ethernet0/0
O IA     2.2.2.2 [110/41] via 192.168.104.1, 00:42:50, Ethernet0/0
O IA     2.2.2.3 [110/41] via 192.168.104.1, 00:42:50, Ethernet0/0
O IA     2.2.2.4 [110/41] via 192.168.104.1, 00:42:50, Ethernet0/0
O IA     2.2.2.5 [110/41] via 192.168.104.1, 00:42:50, Ethernet0/0
O IA     3.3.3.1 [110/41] via 192.168.104.1, 00:27:13, Ethernet0/0
O IA     3.3.3.2 [110/41] via 192.168.104.1, 00:27:13, Ethernet0/0
O IA     3.3.3.3 [110/41] via 192.168.104.1, 00:27:13, Ethernet0/0
O IA     3.3.3.4 [110/41] via 192.168.104.1, 00:27:13, Ethernet0/0
O IA     3.3.3.5 [110/41] via 192.168.104.1, 00:27:13, Ethernet0/0
O IA     5.5.5.1 [110/41] via 192.168.104.1, 00:51:23, Ethernet0/0
O IA     5.5.5.2 [110/41] via 192.168.104.1, 00:51:23, Ethernet0/0
O IA     5.5.5.3 [110/41] via 192.168.104.1, 00:51:23, Ethernet0/0
O IA     5.5.5.4 [110/41] via 192.168.104.1, 00:51:23, Ethernet0/0
O IA     5.5.5.5 [110/41] via 192.168.104.1, 00:51:24, Ethernet0/0

***physical interface routes omitted, there are alot of them!***
AREA4#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As with the classic stub area, we can configure&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;area 4 nssa no-summary
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;on the ABR and then &amp;lsquo;area 4 nssa&amp;rsquo; on the others. Lets see how this affects the LSDB and routing table.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AREA4#show ip ospf database

            OSPF Router with ID (4.4.4.5) (Process ID 1)

                Router Link States (Area 4)

Link ID         ADV Router      Age         Seq#       Checksum Link count
4.4.4.5         4.4.4.5         34          0x80000008 0x00B4BF 7
44.44.44.5      44.44.44.5      35          0x80000006 0x00E3FE 1
192.168.104.1   192.168.104.1   41          0x80000006 0x00D9F6 1

                Net Link States (Area 4)

Link ID         ADV Router      Age         Seq#       Checksum
192.168.40.2    44.44.44.5      35          0x80000004 0x0098E3
192.168.104.1   192.168.104.1   41          0x80000004 0x001F8B

                Summary Net Link States (Area 4)

Link ID         ADV Router      Age         Seq#       Checksum
0.0.0.0         192.168.104.1   57          0x80000001 0x004C17

                Type-7 AS External Link States (Area 4)

Link ID         ADV Router      Age         Seq#       Checksum Tag
44.44.44.1      44.44.44.5      41          0x80000001 0x0027CC 0
44.44.44.2      44.44.44.5      41          0x80000001 0x001DD5 0
44.44.44.3      44.44.44.5      41          0x80000001 0x0013DE 0
44.44.44.4      44.44.44.5      41          0x80000001 0x0009E7 0
44.44.44.5      44.44.44.5      41          0x80000001 0x00FEF0 0
AREA4#
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;AREA4#show ip route
Codes: ***redacted***

Gateway of last resort is 192.168.104.1 to network 0.0.0.0

O*IA  0.0.0.0/0 [110/11] via 192.168.104.1, 00:01:01, Ethernet0/0
      4.0.0.0/32 is subnetted, 5 subnets
C        4.4.4.1 is directly connected, Loopback1
C        4.4.4.2 is directly connected, Loopback2
C        4.4.4.3 is directly connected, Loopback3
C        4.4.4.4 is directly connected, Loopback4
C        4.4.4.5 is directly connected, Loopback5
      44.0.0.0/32 is subnetted, 5 subnets
O N2     44.44.44.1 [110/20] via 192.168.40.2, 00:00:56, Ethernet0/1
O N2     44.44.44.2 [110/20] via 192.168.40.2, 00:00:56, Ethernet0/1
O N2     44.44.44.3 [110/20] via 192.168.40.2, 00:00:56, Ethernet0/1
O N2     44.44.44.4 [110/20] via 192.168.40.2, 00:00:56, Ethernet0/1
O N2     44.44.44.5 [110/20] via 192.168.40.2, 00:00:56, Ethernet0/1
      192.168.40.0/24 is variably subnetted, 2 subnets, 2 masks
C        192.168.40.0/30 is directly connected, Ethernet0/1
L        192.168.40.1/32 is directly connected, Ethernet0/1
      192.168.104.0/24 is variably subnetted, 2 subnets, 2 masks
C        192.168.104.0/30 is directly connected, Ethernet0/0
L        192.168.104.2/32 is directly connected, Ethernet0/0
AREA4#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I have not omitted any routes or LSAs here, this is the full output! Now type 3,4, and 5 LSAs are not being flooded throughout the network with the exception of the type 3 LSA specifying a default route as an O IA route. With this configuration the routers in area 4 have full reachability to the OSPF domain, the external routes beyond the OSPF domain, as well as the directly redistributed networks.&lt;/p&gt;
&lt;p&gt;However now there is a case that hasn&amp;rsquo;t been satisfied, what if we still want specific routes to the other OSPF areas but not the external destinations, but also want reachability to everything? In this case we will go to area 5 and configure.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;area 5 nssa default-information-originate
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;on the ABR and &amp;lsquo;area 5 nssa&amp;rsquo; on the others. The initial LSDB is very similar to the one I pasted above for area 4 so you may reference that for the initial state. Lets look at the result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AREA5#show ip ospf database

            OSPF Router with ID (5.5.5.5) (Process ID 1)

                Router Link States (Area 5)

Link ID         ADV Router      Age         Seq#       Checksum Link count
5.5.5.5         5.5.5.5         33          0x80000007 0x006DDC 7
55.55.55.5      55.55.55.5      34          0x80000005 0x002C61 1
192.168.105.1   192.168.105.1   40          0x80000005 0x00DFED 1

                Net Link States (Area 5)

Link ID         ADV Router      Age         Seq#       Checksum
192.168.50.2    55.55.55.5      34          0x80000004 0x004EDE
192.168.105.1   192.168.105.1   40          0x80000004 0x003A6A

                Summary Net Link States (Area 5)

Link ID         ADV Router      Age         Seq#       Checksum
1.1.1.1         192.168.105.1   56          0x80000003 0x0040FD
1.1.1.2         192.168.105.1   56          0x80000003 0x003607
1.1.1.3         192.168.105.1   56          0x80000003 0x002C10
1.1.1.4         192.168.105.1   56          0x80000003 0x002219
1.1.1.5         192.168.105.1   56          0x80000003 0x001822
2.2.2.1         192.168.105.1   56          0x80000003 0x001C1F
2.2.2.2         192.168.105.1   56          0x80000003 0x001228
2.2.2.3         192.168.105.1   56          0x80000003 0x000831
2.2.2.4         192.168.105.1   56          0x80000003 0x00FD3A
2.2.2.5         192.168.105.1   56          0x80000003 0x00F343
3.3.3.1         192.168.105.1   56          0x80000005 0x00F342
3.3.3.2         192.168.105.1   56          0x80000005 0x00E94B
3.3.3.3         192.168.105.1   56          0x80000005 0x00DF54
3.3.3.4         192.168.105.1   56          0x80000005 0x00D55D
3.3.3.5         192.168.105.1   56          0x80000005 0x00CB66
4.4.4.1         192.168.105.1   56          0x80000002 0x00D560
4.4.4.2         192.168.105.1   56          0x80000002 0x00CB69
4.4.4.3         192.168.105.1   56          0x80000002 0x00C172
4.4.4.4         192.168.105.1   56          0x80000002 0x00B77B
4.4.4.5         192.168.105.1   56          0x80000002 0x00AD84
10.10.10.1      192.168.105.1   56          0x80000003 0x009696
10.10.10.2      192.168.105.1   56          0x80000003 0x008C9F
10.10.10.3      192.168.105.1   56          0x80000003 0x0082A8
10.10.10.4      192.168.105.1   56          0x80000003 0x0078B1
10.10.10.5      192.168.105.1   56          0x80000003 0x006EBA
192.168.1.0     192.168.105.1   56          0x80000003 0x0031B4
192.168.2.0     192.168.105.1   56          0x80000003 0x0026BE
192.168.3.0     192.168.105.1   56          0x80000003 0x001BC8
192.168.4.0     192.168.105.1   56          0x80000003 0x0010D2
192.168.5.0     192.168.105.1   56          0x80000003 0x00A04B
192.168.6.0     192.168.105.1   56          0x80000003 0x00F9E6
192.168.10.0    192.168.105.1   56          0x80000003 0x00CD0F
192.168.30.0    192.168.105.1   56          0x80000003 0x00B9FA
192.168.40.0    192.168.105.1   56          0x80000002 0x004D5E
192.168.100.0   192.168.105.1   56          0x80000003 0x005028
192.168.102.0   192.168.105.1   56          0x80000003 0x003A3C
192.168.103.0   192.168.105.1   56          0x80000003 0x002F46
192.168.104.0   192.168.105.1   56          0x80000003 0x002450

                Type-7 AS External Link States (Area 5)

Link ID         ADV Router      Age         Seq#       Checksum Tag
0.0.0.0         192.168.105.1   56          0x80000001 0x0019C4 0
55.55.55.1      55.55.55.5      39          0x80000001 0x001394 0
55.55.55.2      55.55.55.5      39          0x80000001 0x00099D 0
55.55.55.3      55.55.55.5      39          0x80000001 0x00FEA6 0
55.55.55.4      55.55.55.5      39          0x80000001 0x00F4AF 0
55.55.55.5      55.55.55.5      39          0x80000001 0x00EAB8 0
AREA5#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And the routing table:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AREA5#sh ip route
Codes: ***redacted***

Gateway of last resort is 192.168.105.1 to network 0.0.0.0

O*N2  0.0.0.0/0 [110/1] via 192.168.105.1, 00:01:19, Ethernet0/0
      1.0.0.0/32 is subnetted, 5 subnets
O IA     1.1.1.1 [110/41] via 192.168.105.1, 00:01:19, Ethernet0/0
O IA     1.1.1.2 [110/41] via 192.168.105.1, 00:01:19, Ethernet0/0
O IA     1.1.1.3 [110/41] via 192.168.105.1, 00:01:19, Ethernet0/0
O IA     1.1.1.4 [110/41] via 192.168.105.1, 00:01:19, Ethernet0/0
O IA     1.1.1.5 [110/41] via 192.168.105.1, 00:01:19, Ethernet0/0
      2.0.0.0/32 is subnetted, 5 subnets
O IA     2.2.2.1 [110/41] via 192.168.105.1, 00:01:19, Ethernet0/0
O IA     2.2.2.2 [110/41] via 192.168.105.1, 00:01:19, Ethernet0/0
O IA     2.2.2.3 [110/41] via 192.168.105.1, 00:01:19, Ethernet0/0
O IA     2.2.2.4 [110/41] via 192.168.105.1, 00:01:19, Ethernet0/0
O IA     2.2.2.5 [110/41] via 192.168.105.1, 00:01:19, Ethernet0/0
      3.0.0.0/32 is subnetted, 5 subnets
O IA     3.3.3.1 [110/41] via 192.168.105.1, 00:01:19, Ethernet0/0
O IA     3.3.3.2 [110/41] via 192.168.105.1, 00:01:19, Ethernet0/0
O IA     3.3.3.3 [110/41] via 192.168.105.1, 00:01:19, Ethernet0/0
O IA     3.3.3.4 [110/41] via 192.168.105.1, 00:01:19, Ethernet0/0
O IA     3.3.3.5 [110/41] via 192.168.105.1, 00:01:19, Ethernet0/0
      4.0.0.0/32 is subnetted, 5 subnets
O IA     4.4.4.1 [110/41] via 192.168.105.1, 00:01:19, Ethernet0/0
O IA     4.4.4.2 [110/41] via 192.168.105.1, 00:01:19, Ethernet0/0
O IA     4.4.4.3 [110/41] via 192.168.105.1, 00:01:19, Ethernet0/0
O IA     4.4.4.4 [110/41] via 192.168.105.1, 00:01:19, Ethernet0/0
O IA     4.4.4.5 [110/41] via 192.168.105.1, 00:01:19, Ethernet0/0
      5.0.0.0/32 is subnetted, 5 subnets
C        5.5.5.1 is directly connected, Loopback1
C        5.5.5.2 is directly connected, Loopback2
C        5.5.5.3 is directly connected, Loopback3
C        5.5.5.4 is directly connected, Loopback4
C        5.5.5.5 is directly connected, Loopback5
      10.0.0.0/32 is subnetted, 5 subnets
O IA     10.10.10.1 [110/31] via 192.168.105.1, 00:01:19, Ethernet0/0
O IA     10.10.10.2 [110/31] via 192.168.105.1, 00:01:19, Ethernet0/0
O IA     10.10.10.3 [110/31] via 192.168.105.1, 00:01:19, Ethernet0/0
O IA     10.10.10.4 [110/31] via 192.168.105.1, 00:01:19, Ethernet0/0
O IA     10.10.10.5 [110/31] via 192.168.105.1, 00:01:19, Ethernet0/0
      55.0.0.0/32 is subnetted, 5 subnets
O N2     55.55.55.1 [110/20] via 192.168.50.2, 00:01:14, Ethernet0/1
O N2     55.55.55.2 [110/20] via 192.168.50.2, 00:01:14, Ethernet0/1
O N2     55.55.55.3 [110/20] via 192.168.50.2, 00:01:14, Ethernet0/1
O N2     55.55.55.4 [110/20] via 192.168.50.2, 00:01:14, Ethernet0/1
O N2     55.55.55.5 [110/20] via 192.168.50.2, 00:01:14, Ethernet0/1

***physical interface routes omitted, there are alot of them!***
AREA5#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here we see that there are still type 3 LSAs, but no type 4 and 5. We also still have a default route, but now it is sent through the area as a type 7 LSA, and shows up in the routing table as an O N2 route!&lt;/p&gt;
&lt;p&gt;So when do we use &amp;lsquo;no-summary&amp;rsquo; and when do we use &amp;lsquo;default-information-originate&amp;rsquo;? Generally, use &amp;lsquo;no-summary&amp;rsquo; when a default route from the ABR is required to reach anything within the OSPF domain (including external routes). Use &amp;lsquo;default-information-originate&amp;rsquo; when a default route is needed from the ABR to reach external destinations, but access to other areas may go through other routers.&lt;/p&gt;
&lt;p&gt;Lets look at a special case of NSSA. Suppose that the ABR in area 5 was also an ASBR redistributing some extra loopbacks into the OSPF domain. We want these to go into area 0 and the rest of the OSPF domain but not into our NSSA. We can simply use&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;area 5 nssa no-redistribution
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;on the ABR/ASBR.&lt;/p&gt;
&lt;p&gt;This will NOT flood the redistributed routes into the NSSA domain, and they will show up in area 0 as type 5 LSAs. Here is a quick demonstration:&lt;/p&gt;
&lt;p&gt;First I configure a loopback address on the AREA5ABR router, configure it to be advertised by EIGRP, then redistribute into OSPF.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                Type-5 AS External Link States


20.20.20.20     192.168.105.1   100         0x80000001 0x005824 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We see it as a type 5 LSA within area 5, it is also present in the other areas. Now lets configure &amp;lsquo;area 5 nssa no-redistribution&amp;rsquo; on the AREA5ABR router and &amp;lsquo;area 5 nssa&amp;rsquo; on the others.&lt;/p&gt;
&lt;p&gt;Now we see&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AREA5#sh ip ospf database external

            OSPF Router with ID (5.5.5.5) (Process ID 1)
AREA5#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;so there are no type 5 LSAs as predicted, then in the type 7 LSAs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                Type-7 AS External Link States (Area 5)

Link ID         ADV Router      Age         Seq#       Checksum Tag
55.55.55.1      55.55.55.5      11          0x80000001 0x001394 0
55.55.55.2      55.55.55.5      11          0x80000001 0x00099D 0
55.55.55.3      55.55.55.5      11          0x80000001 0x00FEA6 0
55.55.55.4      55.55.55.5      11          0x80000001 0x00F4AF 0
55.55.55.5      55.55.55.5      11          0x80000001 0x00EAB8 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is no LSA for the 20.20.20.20 interface. However if we go to the hub router and check its LSDB:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HUB# sh ip ospf database external
                Type-5 AS External Link States

Link ID         ADV Router      Age         Seq#       Checksum Tag
***redacted***
20.20.20.20     192.168.105.1   413         0x80000001 0x005824 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We see that this network will be seen by everyone else.&lt;/p&gt;
&lt;p&gt;As you can see, these OSPF area types are incredibly versatile, and their usage highly depends on the topology you are working with. I highly encourage everyone reading this to lab this up and try different scenarios. For example what if your internal OSPF network is connected to multiple ABRs? Can you leverage different stub configurations on those ABRs for optimal routing and even some sort of load balancing between the ABRs?&lt;/p&gt;
&lt;p&gt;If you have any questions about the content of this post, don&amp;rsquo;t hesitate to &lt;a href=&#34;mailto:villarreal.alan.aav@gmail.com&#34;&gt;&lt;strong&gt;email&lt;/strong&gt;&lt;/a&gt; me or leave a comment in the disqus section below!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>OSPF Stub Area Types Part 1: Stub and Totally Stubby</title>
       <link>avillarreal.io/posts/ospfareatypes/</link>
       <pubDate>Sat, 28 Mar 2020 20:15:03 -0700</pubDate>
       
       <guid>avillarreal.io/posts/ospfareatypes/</guid>
       <description>&lt;p&gt;For up and coming network engineers and those studying for their CCNA and CCNP, OSPF can be quite a daunting routing protocol. It&amp;rsquo;s metric is much simpler than EIGRP, but the inner workings can be much more complex. Think LSAs, LSDBs, Dijkstra&amp;rsquo;s algorithm, etc. Adding to this, there are various configurations that allow for certain LSA types to be filtered at different points in the network and numerous other features. The focus of this post will be those area types (called stub areas) that give network engineers more granular control of the size of their router&amp;rsquo;s link state databases, which in turn eases resource consumption. I am assuming some familiarity with LSA types and basic OSPF concepts so I will not go over that in this discussion, however the effects of stub areas should be clear even without knowing LSAs. This post was inspired by Narbik Kocharians&amp;rsquo; &lt;a href=&#34;https://www.youtube.com/watch?v=cM3OI_ZyRuQ&#34;&gt;&lt;strong&gt;video&lt;/strong&gt;&lt;/a&gt; on the subject, which was instrumental for me in really understanding the concepts and use cases of these stub areas while studying for my CCNP ROUTE. I will demonstrate OSPF Stub Areas using a GNS3 lab and observing the changes in the routing tables/link state databases. I highly encourage everyone to follow along and lab this as well!&lt;/p&gt;
&lt;p&gt;Before getting into OSPF discussion, we must first examine the lab environment. This lab is built in GNS3 2.2.3 using IOU L3 images (i86bi-linux-l3-adventerprisek9-15.4.1T.bin). The full topology is as follows (click &lt;a href=&#34;avillarreal.io/1resources/images/ospfstub1/topology.PNG&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt; for full size):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;avillarreal.io/1resources/images/ospfstub1/topology.PNG&#34; alt=&#34;topology&#34;&gt;&lt;/p&gt;
&lt;p&gt;A couple of notes about the topology:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For the purposes of this lab, the individual physical interface IP addresses do not matter, we are mostly concerned with the loopbacks configured on the routers named AreaX as well as the ASBRs.&lt;/li&gt;
&lt;li&gt;x = {1,5} = {1,2,3,4,5}, so each of these routers with this notation has 5 loopbacks configured&lt;/li&gt;
&lt;li&gt;The routers called AreaX are used to simulate an internal network in the specified area consisting of several routers participating in OSPF.&lt;/li&gt;
&lt;li&gt;No static routing is configured.&lt;/li&gt;
&lt;li&gt;I have created a gns3 portable project, that can be downloaded &lt;a href=&#34;avillarreal.io/1resources/misc/ospfstub1/OSPFStubArea.gns3project&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;initial-state&#34;&gt;Initial State&lt;/h2&gt;
&lt;p&gt;Let us first look at the initial state of the router called AREA1. As we can see the LSDB is rather large (click &lt;a href=&#34;avillarreal.io/1resources/textfiles/ospfstub1/area1lsdb.txt&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt; to see the full output). For this post in particular we are interested in the Type 3,4, and 5 LSAs. Note that the output that I am pasting here is omitting LSAs from the physical links on the network, as we are looking only at the loopbacks configured as described above. That means the LSDB is even larger than what I am showing here (14 extra type 3 LSAs)! The LSDB for Areas 1 and 2 are going to be almost exactly the same, except area 1 is going to have type 3 LSAs for area 2 and vice versa. (In fact the initial LSDB for all of the AREAx routers will be similar)&lt;/p&gt;
&lt;h3 id=&#34;area-1-type-3-lsa&#34;&gt;Area 1 Type 3 LSA&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;                 Summary Net Link States (Area 1)

Link ID         ADV Router      Age         Seq#       Checksum
2.2.2.1         192.168.100.1   17          0x80000004 0x0097AD
2.2.2.2         192.168.100.1   17          0x80000004 0x008DB6
2.2.2.3         192.168.100.1   17          0x80000004 0x0083BF
2.2.2.4         192.168.100.1   17          0x80000004 0x0079C8
2.2.2.5         192.168.100.1   17          0x80000004 0x006FD1
3.3.3.1         192.168.100.1   17          0x80000004 0x0073CE
3.3.3.2         192.168.100.1   17          0x80000004 0x0069D7
3.3.3.3         192.168.100.1   17          0x80000004 0x005FE0
3.3.3.4         192.168.100.1   17          0x80000004 0x0055E9
3.3.3.5         192.168.100.1   17          0x80000004 0x004BF2
4.4.4.1         192.168.100.1   17          0x80000004 0x004FEF
4.4.4.2         192.168.100.1   17          0x80000004 0x0045F8
4.4.4.3         192.168.100.1   17          0x80000004 0x003B02
4.4.4.4         192.168.100.1   17          0x80000004 0x00310B
4.4.4.5         192.168.100.1   17          0x80000004 0x002714
5.5.5.1         192.168.100.1   17          0x80000004 0x002B11
5.5.5.2         192.168.100.1   17          0x80000004 0x00211A
5.5.5.3         192.168.100.1   17          0x80000004 0x001723
5.5.5.4         192.168.100.1   17          0x80000004 0x000D2C
5.5.5.5         192.168.100.1   17          0x80000004 0x000335
10.10.10.1      192.168.100.1   18          0x80000009 0x00082A
10.10.10.2      192.168.100.1   18          0x80000009 0x00FD33
10.10.10.3      192.168.100.1   18          0x80000009 0x00F33C
10.10.10.4      192.168.100.1   18          0x80000009 0x00E945
10.10.10.5      192.168.100.1   18          0x80000009 0x00DF4E

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;area-1-type-4-lsa&#34;&gt;Area 1 Type 4 LSA&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;                Summary ASB Link States (Area 1)

Link ID         ADV Router      Age         Seq#       Checksum
6.6.6.5         192.168.100.1   17          0x80000001 0x0068D9
33.33.33.5      192.168.100.1   17          0x80000001 0x00617B
44.44.44.5      192.168.100.1   17          0x80000001 0x00D3E7
55.55.55.5      192.168.100.1   17          0x80000001 0x004654

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;area-1-type-5-lsa&#34;&gt;Area 1 Type 5 LSA&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;                Type-5 AS External Link States

Link ID         ADV Router      Age         Seq#       Checksum Tag
6.6.6.1         6.6.6.5         1446        0x80000002 0x005421 0
6.6.6.2         6.6.6.5         1446        0x80000002 0x004A2A 0
6.6.6.3         6.6.6.5         1446        0x80000002 0x004033 0
6.6.6.4         6.6.6.5         1446        0x80000002 0x00363C 0
6.6.6.5         6.6.6.5         1446        0x80000002 0x002C45 0
33.33.33.1      33.33.33.5      1408        0x80000002 0x00F9D8 0
33.33.33.2      33.33.33.5      1408        0x80000002 0x00EFE1 0
33.33.33.3      33.33.33.5      1408        0x80000002 0x00E5EA 0
33.33.33.4      33.33.33.5      1408        0x80000002 0x00DBF3 0
33.33.33.5      33.33.33.5      1408        0x80000002 0x00D1FC 0
44.44.44.1      44.44.44.5      1395        0x80000002 0x00632D 0
44.44.44.2      44.44.44.5      1395        0x80000002 0x005936 0
44.44.44.3      44.44.44.5      1394        0x80000002 0x004F3F 0
44.44.44.4      44.44.44.5      1394        0x80000002 0x004548 0
44.44.44.5      44.44.44.5      1394        0x80000002 0x003B51 0
55.55.55.1      55.55.55.5      1411        0x80000002 0x00CC81 0
55.55.55.2      55.55.55.5      1411        0x80000002 0x00C28A 0
55.55.55.3      55.55.55.5      1411        0x80000002 0x00B893 0
55.55.55.4      55.55.55.5      1411        0x80000002 0x00AE9C 0
55.55.55.5      55.55.55.5      1411        0x80000002 0x00A4A5 0

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;and-now-we-can-look-at-the-routing-table-recall-no-static-routing-is-configured&#34;&gt;And now we can look at the routing table, Recall NO static routing is configured:&lt;/h3&gt;
&lt;h3 id=&#34;inter-area-routes&#34;&gt;Inter Area Routes&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;AREA1#sh ip route ospf | include O IA
O IA     2.2.2.1 [110/41] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     2.2.2.2 [110/41] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     2.2.2.3 [110/41] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     2.2.2.4 [110/41] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     2.2.2.5 [110/41] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     3.3.3.1 [110/41] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     3.3.3.2 [110/41] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     3.3.3.3 [110/41] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     3.3.3.4 [110/41] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     3.3.3.5 [110/41] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     4.4.4.1 [110/41] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     4.4.4.2 [110/41] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     4.4.4.3 [110/41] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     4.4.4.4 [110/41] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     4.4.4.5 [110/41] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     5.5.5.1 [110/41] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     5.5.5.2 [110/41] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     5.5.5.3 [110/41] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     5.5.5.4 [110/41] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     5.5.5.5 [110/41] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     10.10.10.1 [110/31] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     10.10.10.2 [110/31] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     10.10.10.3 [110/31] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     10.10.10.4 [110/31] via 192.168.100.1, 00:04:19, Ethernet0/0
O IA     10.10.10.5 [110/31] via 192.168.100.1, 00:04:19, Ethernet0/0
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;external-routes&#34;&gt;External Routes&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;AREA1#sh ip route ospf | include O E2
O E2     6.6.6.1 [110/20] via 192.168.100.1, 00:05:35, Ethernet0/0
O E2     6.6.6.2 [110/20] via 192.168.100.1, 00:05:35, Ethernet0/0
O E2     6.6.6.3 [110/20] via 192.168.100.1, 00:05:35, Ethernet0/0
O E2     6.6.6.4 [110/20] via 192.168.100.1, 00:05:35, Ethernet0/0
O E2     6.6.6.5 [110/20] via 192.168.100.1, 00:05:35, Ethernet0/0
O E2     33.33.33.1 [110/20] via 192.168.100.1, 00:05:35, Ethernet0/0
O E2     33.33.33.2 [110/20] via 192.168.100.1, 00:05:35, Ethernet0/0
O E2     33.33.33.3 [110/20] via 192.168.100.1, 00:05:35, Ethernet0/0
O E2     33.33.33.4 [110/20] via 192.168.100.1, 00:05:35, Ethernet0/0
O E2     33.33.33.5 [110/20] via 192.168.100.1, 00:05:35, Ethernet0/0
O E2     44.44.44.1 [110/20] via 192.168.100.1, 00:05:35, Ethernet0/0
O E2     44.44.44.2 [110/20] via 192.168.100.1, 00:05:35, Ethernet0/0
O E2     44.44.44.3 [110/20] via 192.168.100.1, 00:05:35, Ethernet0/0
O E2     44.44.44.4 [110/20] via 192.168.100.1, 00:05:35, Ethernet0/0
O E2     44.44.44.5 [110/20] via 192.168.100.1, 00:05:35, Ethernet0/0
O E2     55.55.55.1 [110/20] via 192.168.100.1, 00:05:35, Ethernet0/0
O E2     55.55.55.2 [110/20] via 192.168.100.1, 00:05:35, Ethernet0/0
O E2     55.55.55.3 [110/20] via 192.168.100.1, 00:05:35, Ethernet0/0
O E2     55.55.55.4 [110/20] via 192.168.100.1, 00:05:35, Ethernet0/0
O E2     55.55.55.5 [110/20] via 192.168.100.1, 00:05:35, Ethernet0/0

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;stub-configuration&#34;&gt;Stub Configuration&lt;/h2&gt;
&lt;p&gt;Suppose we want to decrease the size of the routing table by eliminating specific routes to external destinations, as the devices in this area do not care about how they reach them and only have 1 exit point anyway. We still want specific routes to the destinations within other areas in OSPF, but we do not care about specific routes to the EIGRP domain. This can be accomplished by using a stub area.&lt;/p&gt;
&lt;p&gt;Configuration is quite simple, we just do&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(config-router)#area 1 stub
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;on all routers in area 1. When we do this on the AREA1ABR router first but not AREA1 the OSPF adjacency goes down. This is because the routers must agree on whether they will allow external routing to form the adjacency. Lets look at the OSPF hello packet once this is done.&lt;/p&gt;
&lt;p&gt;Here is a piece of the hello packet from the router that does NOT have &amp;lsquo;area 1 stub&amp;rsquo; configured:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;avillarreal.io/1resources/images/ospfstub1/nostubpcap.PNG&#34; alt=&#34;nostub&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now the packet from the router that does have &amp;lsquo;area 1 stub&amp;rsquo; configured:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;avillarreal.io/1resources/images/ospfstub1/stubpcap.PNG&#34; alt=&#34;stub1&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note the difference in the E bit. Once I set &amp;lsquo;area 1 stub&amp;rsquo; on the AREA1 router the adjacency forms again and we can observe what has changed.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AREA1#sh ip ospf database external

            OSPF Router with ID (1.1.1.5) (Process ID 1)

AREA1#
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;AREA1#sh ip route ospf | include O E2
AREA1#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What happened to the external routes and type 4/5 LSAs? Can we still reach those external networks?&lt;/p&gt;
&lt;p&gt;The answer is YES, but how is this accomplished?&lt;/p&gt;
&lt;p&gt;When we configure area 1 as a stub, we are essentially putting the effort of routing to external destinations from this area solely on the ABR. This is accomplished with a special type 3 LSA propagated throughout the area. Let us take a look at the type 3 LSAs in the database:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                Summary Net Link States (Area 1)

Link ID         ADV Router      Age         Seq#       Checksum
0.0.0.0         192.168.100.1   27          0x80000001 0x00E08E
2.2.2.1         192.168.100.1   27          0x80000007 0x00AF94
2.2.2.2         192.168.100.1   27          0x80000007 0x00A59D
2.2.2.3         192.168.100.1   27          0x80000007 0x009BA6
2.2.2.4         192.168.100.1   27          0x80000007 0x0091AF
2.2.2.5         192.168.100.1   27          0x80000007 0x0087B8
3.3.3.1         192.168.100.1   27          0x80000007 0x008BB5
3.3.3.2         192.168.100.1   27          0x80000007 0x0081BE
3.3.3.3         192.168.100.1   28          0x80000007 0x0077C7
3.3.3.4         192.168.100.1   28          0x80000007 0x006DD0
3.3.3.5         192.168.100.1   28          0x80000007 0x0063D9
4.4.4.1         192.168.100.1   28          0x80000007 0x0067D6
4.4.4.2         192.168.100.1   28          0x80000007 0x005DDF
4.4.4.3         192.168.100.1   28          0x80000007 0x0053E8
4.4.4.4         192.168.100.1   28          0x80000007 0x0049F1
4.4.4.5         192.168.100.1   28          0x80000007 0x003FFA
5.5.5.1         192.168.100.1   28          0x80000007 0x0043F7
5.5.5.2         192.168.100.1   28          0x80000007 0x003901
5.5.5.3         192.168.100.1   28          0x80000007 0x002F0A
5.5.5.4         192.168.100.1   28          0x80000007 0x002513
5.5.5.5         192.168.100.1   28          0x80000007 0x001B1C
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Looks identical to the initial state except for the first entry, what is this 0.0.0.0 LSA telling us? We can take a closer look:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AREA1#sh ip ospf database summary

            OSPF Router with ID (1.1.1.5) (Process ID 1)

                Summary Net Link States (Area 1)

  Routing Bit Set on this LSA in topology Base with MTID 0
  LS age: 108
  Options: (No TOS-capability, DC, Upward)
  LS Type: Summary Links(Network)
  Link State ID: 0.0.0.0 (summary Network Number)
  Advertising Router: 192.168.100.1
  LS Seq Number: 80000001
  Checksum: 0xE08E
  Length: 28
  Network Mask: /0
        MTID: 0         Metric: 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Network number of 0.0.0.0 and a network mask of 0. This looks like a default route! We can verify by looking at the routing table:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AREA1#show ip route

Gateway of last resort is 192.168.100.1 to network 0.0.0.0

O*IA  0.0.0.0/0 [110/11] via 192.168.100.1, 00:03:09, Ethernet0/0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The AREA1ABR router has created and flooded a type 3 LSA which results in the creation a default route to all external destinations through itself. We were able to cut the routing table and LSDB of non ABR area 1 routers in half with 2 configuration lines!&lt;/p&gt;
&lt;p&gt;To summarize, in a stub area type 4 and 5 LSAs will not be propagated by the ABR. Instead the ABR will generate a type 3 LSA specifying a default route and propagate that. Now all of the non ABR routers in area 1 will have a single default route to external networks that travels through the ABR.&lt;/p&gt;
&lt;h2 id=&#34;totally-stubby-configuration&#34;&gt;Totally Stubby Configuration&lt;/h2&gt;
&lt;p&gt;Now suppose that we wish to decrease the size of the database and the routing table even further, as our poor old router is starting to struggle with the overhead of running OSPF, but we don&amp;rsquo;t want to manage static routes. OSPF gives us a method of not only stopping type 4/5 LSAS, but also limiting the propagation of type 3 LSAs. This is called a Totally Stubby Area.&lt;/p&gt;
&lt;p&gt;Lets hop over to area 2 for this demonstration. The LSDB is going to be nearly identical to the initial state I showed above, except IA routes to 2.2.2.2 instead are to 1.1.1.1 (in area 1).&lt;/p&gt;
&lt;p&gt;The configuration is quite similar, except on the ABR we add &amp;lsquo;no-summary&amp;rsquo; (as in no summary LSA, you can see where this is going) to the command.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AREA2ABR(config-router)#area 2 stub no-summary
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and on the regular AREA2 router (and all other routers if they were there) we configure&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AREA2(config-router)#area 2 stub
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;as before.&lt;/p&gt;
&lt;p&gt;Now lets look at the OSPF database in area 2.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AREA2#sh ip ospf database

            OSPF Router with ID (2.2.2.5) (Process ID 1)

                Router Link States (Area 2)

Link ID         ADV Router      Age         Seq#       Checksum Link count
2.2.2.5         2.2.2.5         104         0x80000008 0x006584 6
192.168.102.1   192.168.102.1   105         0x80000007 0x00429F 1

                Net Link States (Area 2)

Link ID         ADV Router      Age         Seq#       Checksum
192.168.102.1   192.168.102.1   100         0x80000006 0x005D5F

                Summary Net Link States (Area 2)

Link ID         ADV Router      Age         Seq#       Checksum
0.0.0.0         192.168.102.1   168         0x80000001 0x00D29A
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Is there a bug, did all the other routers die? NO, by configuring area 2 as a totally stubby area the ABR is NOT flooding type 3,4, or 5 LSAs within the area. Instead, as with the stub area we have a special 0.0.0.0 Type 3 LSA,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AREA2#show ip ospf  database summary

            OSPF Router with ID (2.2.2.5) (Process ID 1)

                Summary Net Link States (Area 2)

  Routing Bit Set on this LSA in topology Base with MTID 0
  LS age: 359
  Options: (No TOS-capability, DC, Upward)
  LS Type: Summary Links(Network)
  Link State ID: 0.0.0.0 (summary Network Number)
  Advertising Router: 192.168.102.1
  LS Seq Number: 80000001
  Checksum: 0xD29A
  Length: 28
  Network Mask: /0
        MTID: 0         Metric: 1
AREA2#

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;in fact this is the only type 3 LSA being flooded into the area, which results in a route that directs all area 2 routers to send all traffic not otherwise specified towards the ABR. Now compare the LSDB after configuring area 2 as totally stubby to the &lt;a href=&#34;avillarreal.io/1resources/textfiles/ospfstub1/area2lsdb.txt&#34;&gt;&lt;strong&gt;initial LSDB of area 2&lt;/strong&gt;&lt;/a&gt; and we have drastically reduced the OSPF overhead on the routers within area 2.&lt;/p&gt;
&lt;p&gt;At this point I hope this has cleared up stub areas and totally stubby areas, however the configuration above should raise some questions. For example, what if we wanted to configure an area with an ASBR as a stub? What if we wish to redistribute directly into a stub but not allow external routes from other areas? In my next post I will discuss the extension to the classic stubby areas, known as Not So Stubby Areas (seriously).&lt;/p&gt;
&lt;p&gt;If you have any questions about the content of this post, don&amp;rsquo;t hesitate to &lt;a href=&#34;mailto:villarreal.alan.aav@gmail.com&#34;&gt;&lt;strong&gt;email&lt;/strong&gt;&lt;/a&gt; me or leave a comment in the disqus section below!&lt;/p&gt;</description>
     </item>
   
 </channel>
</rss>
